knitr::opts_chunk$set(message=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60), echo=T)
install.packages("knitr")
knitr::opts_chunk$set(message=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60), echo=T)
library(data.table)
library(bit64)
install.packages(bit64)
install.packages("bit64")
knitr::opts_chunk$set(message=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60), echo=T)
library(data.table)
library(bit64)
library(stringr)
library(Rcpp)
library(timeDate)
install.packages("timeData")
install.packages("timeDate")
knitr::opts_chunk$set(message=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60), echo=T)
library(data.table)
library(bit64)
library(stringr)
library(Rcpp)
library(timeDate)
library(chron)
install.packages(c("chron", "stringr", "ggplot2", "AER"))
install.packages(c("chron", "stringr", "ggplot2", "AER"))
knitr::opts_chunk$set(message=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60), echo=T)
library(data.table)
library(bit64)
library(stringr)
library(Rcpp)
library(timeDate)
library(chron)
library(knitr)
library(stringr)
library(ggplot2)
library(AER)
# Functions
plot_density = function(data, bins = 30, label, title, plot_mean = T){
if (plot_mean){
qplot(data, geom = 'blank') +
geom_line(aes(y = ..density.., colour = label), stat = 'density') +
geom_histogram(aes(y = ..density..), alpha = 0.5, bins = bins) +
scale_colour_manual(name = 'Density', values = 'red') +
labs(title = title) +
theme(legend.title = element_text(size=8),
legend.text = element_text(size=8), legend.key = element_rect(size = 0.1)) +
theme(plot.title = element_text(size=10, face = "bold", hjust=.5),
axis.title.x=element_blank(), axis.title.y=element_blank()) +
geom_vline(xintercept = mean(data), colour="blue")+
geom_text(aes(x=mean(data), y=.3, label=paste0("mean = ", round(mean(data),2))),
colour="blue", size=4)}
else{
qplot(data, geom = 'blank') +
geom_line(aes(y = ..density.., colour = label), stat = 'density') +
geom_histogram(aes(y = ..density..), alpha = 0.5, bins = bins) +
scale_colour_manual(name = 'Density', values = 'red') +
labs(title = title) +
theme(legend.title = element_text(size=8),
legend.text = element_text(size=8), legend.key = element_rect(size = 0.1)) +
theme(plot.title = element_text(size=10, face = "bold", hjust=.5),
axis.title.x=element_blank(), axis.title.y=element_blank())}
}
doHistogram = function(dataset, timeperiod){
for (i in resultBrand){
data = dataset[brand_descr_corrected==i]
for (j in variables){
coefficients = data[, c(names(data)[str_sub(names(data),start=6)==j]), with=F]
count = nrow(coefficients)
# coefficient = coefficients[,1, with = F]
coefficient_all = coefficients[,paste0("coef_", j),with=F]
coefficient_all = coefficient_all[which(abs(coefficient_all) <=10),]
plot_all = plot_density(coefficient_all[[1]], label = j,
title = paste0(timeperiod, ": ", i,
" (all, n=", count, ", nplot=", nrow(coefficient_all),")"))
ggsave(paste0(timeperiod, "_", i, "_", j, "_all.png"), plot = plot_all, width = 5, height = 5)
coefficients_sig = eval(parse(text = paste0("coefficients[pval_",j,"<0.05]")))
count = nrow(coefficients_sig)
if (count >0){
coefficient_sig = coefficients_sig[,paste0("coef_", j),with=F]
coefficient_sig = coefficient_sig[which(abs(coefficient_sig) <=10),]
if (nrow(coefficient_sig) > 1){
plot_sig = plot_density(coefficient_sig[[1]], label = j,
title = paste0(timeperiod, ": ", i,
" (sig, n=", count, ", nplot=", nrow(coefficient_sig),")"))
ggsave(paste0(timeperiod, "_", i, "_", j, "_sig.png"), plot = plot_sig, width = 5, height = 5)
}
}
# print(plot_all)
# print(plot_sig)
}
}
}
cppFunction(
'NumericVector stockdi(NumericVector x, double delta, double z) {
int n = x.size();
NumericVector y = clone(x);
y[0] = z;
for (int i = 1; i<n; i++){
y[i] = (1-delta)*y[i-1] + delta*x[i-1];
}
return(y);
}')
myHoliday = function(inYear, holidayName, daysBefore, daysAfter){
dates(as.character(seq((as.Date(holiday(inYear, holidayName))-daysBefore),
as.Date(holiday(inYear, holidayName))-daysAfter ,by='day')),format="Y-M-D")
}
# Set directory and load the data
dir_data = "~/Data/RMS-Build-2016/"
module = 1393
# module = 1340
# Load meta_data
load(paste0(dir_data, "Meta-Data/Meta-Data-Corrected.RData"))
# Set directory and load the data
dir_data = "~/PassThrough/Data/RMS-Build-2016/"
module = 1393
# module = 1340
# Load meta_data
load(paste0(dir_data, "Meta-Data/Meta-Data-Corrected.RData"))
# Set directory and load the data
dir_data = "~/PassThrough/Data/RMS-Build-2016/"
module = 1393
# module = 1340
# Load meta_data
load(paste0(dir_data, "Meta-Data/Meta-Data-Corrected.RData"))
meta_data = setDT(meta_data)[product_module_code==module,
.(upc, upc_ver_uc, revenue_RMS, N_weeks_RMS)]
# Load the product data, convert units to ounce
load(paste0(dir_data, "Meta-Data/Products-Corrected.RData"))
product_data = setDT(products)[product_module_code==module]
product_data[size1_units == "PO", `:=`(size1_amount = size1_amount*16, size1_units = "OZ" )]
product_data = product_data[size1_units=="OZ"][,.(upc, upc_ver_uc, upc_ver_uc_corrected, brand_descr_corrected,
size1_amount, multi)]
# Merge data; find the top brand
product_revenue = merge(product_data, meta_data, by = c("upc", "upc_ver_uc"))
product_revenue = product_revenue[, c("productRev", "productWeek") := lapply(.SD, sum),
.SDcols = c("revenue_RMS","N_weeks_RMS"),
by = .(upc, upc_ver_uc_corrected)]
revenue = product_revenue[, .(brand_revenue = sum(revenue_RMS)), by = brand_descr_corrected]
top_brand = revenue[order(-brand_revenue), brand_descr_corrected][1:10]
#save(top_brand, file="../../media/xlin0/share/xl150/top_brand_1393.RData")
# Movement data
all_move_file = list.files(paste0(dir_data, "RMS-Processed/Modules/", module))
all_move = data.table(NULL)
for (i in all_move_file){
load(paste0(dir_data, "RMS-Processed/Modules/", module, "/", i))
move = move[!(is.na(base_price)|is.na(imputed_price))]
move[, `:=`(store_rev = sum(units*imputed_price, na.rm=T)), by = .(upc, upc_ver_uc_corrected, store_code_uc)]
setkey(product_data, upc, upc_ver_uc)
setkey(move, upc, upc_ver_uc)
move = move[product_data, nomatch=0L]
# Obtain per unit price and units
move[, `:=`(base_price = base_price/size1_amount, imputed_price = imputed_price/size1_amount,
units = units*size1_amount*multi)]
# Aggregate price to brand level (only consider top brands)
move[!(brand_descr_corrected %in% top_brand), brand_descr_corrected := "OTHER"]
move = move[, .(base_cum= sum(store_rev*base_price, na.rm=T),
imputed_cum = sum(store_rev*imputed_price, na.rm=T),
wts_cum = sum(store_rev, na.rm=T),
units = sum(units, na.rm=T)),
by = .(brand_descr_corrected, store_code_uc, week_end)]
# Bind the data together
all_move = rbindlist(list(all_move, move))
# Aggregate to brand level
all_move = all_move[, .(base_cum= sum(base_cum, na.rm=T),
imputed_cum = sum(imputed_cum, na.rm=T),
wts_cum = sum(wts_cum, na.rm=T),
units = sum(units, na.rm=T)),
by = .(brand_descr_corrected, store_code_uc, week_end)]
}
# Movement data
all_move_file = list.files(paste0(dir_data, "RMS-Processed/Modules/", module))
all_move = as.list(1:length(all_move_file))
k = 0
for (i in all_move_file){
k = k+1
load(paste0(dir_data, "RMS-Processed/Modules/", module, "/", i))
move = move[!(is.na(base_price)|is.na(imputed_price))]
move[, `:=`(store_rev = sum(units*imputed_price, na.rm=T)), by = .(upc, upc_ver_uc_corrected, store_code_uc)]
setkey(product_data, upc, upc_ver_uc)
setkey(move, upc, upc_ver_uc)
move = move[product_data, nomatch=0L]
# Obtain per unit price and units
move[, `:=`(base_price = base_price/size1_amount, imputed_price = imputed_price/size1_amount,
units = units*size1_amount*multi)]
# Aggregate price to brand level (only consider top brands)
move[!(brand_descr_corrected %in% top_brand), brand_descr_corrected := "OTHER"]
all_move[[k]] = move[, .(base_cum= sum(store_rev*base_price, na.rm=T),
imputed_cum = sum(store_rev*imputed_price, na.rm=T),
wts_cum = sum(store_rev, na.rm=T),
units = sum(units, na.rm=T)),
by = .(brand_descr_corrected, store_code_uc, week_end)]
}
all_move
# Movement data
all_move_file = list.files(paste0(dir_data, "RMS-Processed/Modules/", module))
all_move = as.list(1:length(all_move_file))
k = 0
for (i in all_move_file){
k = k+1
load(paste0(dir_data, "RMS-Processed/Modules/", module, "/", i))
move = move[!(is.na(base_price)|is.na(imputed_price))]
move[, `:=`(store_rev = sum(units*imputed_price, na.rm=T)), by = .(upc, upc_ver_uc_corrected, store_code_uc)]
setkey(product_data, upc, upc_ver_uc)
setkey(move, upc, upc_ver_uc)
move = move[product_data, nomatch=0L]
# Obtain per unit price and units
move[, `:=`(base_price = base_price/size1_amount, imputed_price = imputed_price/size1_amount,
units = units*size1_amount*multi)]
# Aggregate price to brand level (only consider top brands)
move[!(brand_descr_corrected %in% top_brand), brand_descr_corrected := "OTHER"]
all_move[[k]] = move[, .(base_cum= sum(store_rev*base_price, na.rm=T),
imputed_cum = sum(store_rev*imputed_price, na.rm=T),
wts_cum = sum(store_rev, na.rm=T),
units = sum(units, na.rm=T)),
by = .(brand_descr_corrected, store_code_uc, week_end)]
}
all_move = rbindlist(all_move)[, .(base_cum= sum(base_cum, na.rm=T),
imputed_cum = sum(imputed_cum, na.rm=T),
wts_cum = sum(wts_cum, na.rm=T),
units = sum(units, na.rm=T)),
by = .(brand_descr_corrected, store_code_uc, week_end)]
gc()
# Aggregate to brand level
# Load the store data
load(paste0(dir_data, "Meta-Data/Stores.RData"))
store_data = setDT(stores)[,.(store_code_uc, year, dma_code, dma_descr, parent_code)]
store_data[, `:=`(chain_mkt = paste(parent_code, dma_descr)),
by = .(dma_descr, parent_code)]
store_multi = unique(store_data[, .(store_code_uc, dma_descr, parent_code)])
store_multi[, count := .N, by = .(store_code_uc)]
store_multi = unique(store_multi[count!=1, store_code_uc])
store_data = store_data[!(store_code_uc %in% store_multi)]
# save(store_data, file="../../media/xlin0/share/xl150/store_data_1393.RData")
# Extract year; Merge movement and store data
all_move[, `:=`(year = as.integer(format(all_move$week_end, format = "%Y")))]
all_move = merge(all_move, store_data, by = c("store_code_uc", "year"))
# Compute the revenue for each store; share; culmulated share ranked by store revenues
store_revenue = all_move[, .(revenue = sum(wts_cum, na.rm = T)), by = .(store_code_uc)]
store_revenue[, share := revenue/sum(revenue, na.rm = T)]
setorder(store_revenue, -share)
store_revenue[, cumshare := cumsum(share)]
# save(store_revenue, file="../../media/xlin0/share/xl150/store_revenue_1393.RData")
top_store = store_revenue[1:min(which((store_revenue$cumshare)>=.90)), store_code_uc]  #### 80%?
all_move = all_move[(store_code_uc %in% top_store),]
# Calculate price indexes based on stores and dmas;
all_move[, `:=`(brand_idx_imputed = imputed_cum/wts_cum,
brand_idx_base = base_cum/wts_cum),
by = .(brand_descr_corrected, store_code_uc, dma_descr, week_end)]
all_move[, `:=`(allOther_idx_imputed = (sum(imputed_cum)-imputed_cum)/(sum(wts_cum)-wts_cum)),
by = .(store_code_uc, dma_descr, week_end)]
# Calculate the Hausman IV
dma_move = all_move[, .(dma_price = sum(imputed_cum)/sum(wts_cum)),
by = .(brand_descr_corrected, dma_code, dma_descr, week_end)]
dma_move[, count := .N, by = .(brand_descr_corrected, week_end)]
dma_move[, hausman := (sum(dma_price) - dma_price) / (count-1), by = .(brand_descr_corrected, week_end)]
dma_move[, `:=`(yearmonth = as.integer(format(dma_move$week_end, format = "%Y%m")))]
# Load the macroeconomics data; Merge with dma_move
load("~/PassThrough/Data/Macro-Data/CPI-SA.RData")
load("~/PassThrough/Data/Macro-Data/employment.RData")
cpi[, yearmonth := as.integer(gsub("-","", year_month))]
month_emply[, yearmonth := as.integer(gsub("-","", month))]
macro_ind = month_emply[, .(yearmonth, dma_code, unemploy_rate)]
macro_ind = merge(macro_ind, cpi[, .(cpi = value, yearmonth)], by = "yearmonth", all = T)
dma_move = merge(macro_ind, dma_move, by = c("dma_code", "yearmonth"), all.y = T)
dma_move = na.omit(dma_move)   # remove data whose hausman is NA, and the time period when marco-indicators are missing
# Merge movement and hausman, macro-economic data
all_move = merge(all_move, dma_move[, c("count", "dma_code") := NULL],
by = c("brand_descr_corrected", "dma_descr", "week_end"))
# Decide if promotion exists
all_move[, `:=`(promotion = (brand_idx_imputed<=(0.95*brand_idx_base))*1)]
# Extract month; See if it's holiday
all_move[, `:=`(Christmas=1*is.holiday(week_end, myHoliday(year,"USChristmasDay",7,0)),
Thanksgiving=1*is.holiday(week_end, myHoliday(year,"USThanksgivingDay",7,0)),
Easter=1*is.holiday(week_end, myHoliday(year,"Easter",7,0))), by = .(week_end, year)]
# Calculate reference price
delta = 0.1
ref0 = 0.1
setkey(all_move, week_end)
all_move[, `:=`(ref_price = shift(brand_idx_imputed)), by = .(brand_descr_corrected, store_code_uc)]
# all_move[, `:=`(ref_price3 = stockdi(brand_idx_imputed, delta, ref0),
#                       ref_price4 = stockdi(category_idx_imputed, delta, ref0)),
#               by = .(store_code_uc, brand_descr_corrected)]
# save(all_move, file="../../media/xlin0/share/xl150/move_1393.RData")
# Take the log
all_move[units==0, units := 1]
all_move[, `:=`(lsold = log(units), lprice = log(brand_idx_imputed),lref = log(ref_price),
lotherPrice = log(allOther_idx_imputed),
lhausman = log(hausman), lcpi = log(cpi), lunemploy = log(unemploy_rate))]
all_move[, `:=`(labove_ref = lprice-lref, lbelow_ref = lprice-lref)]
all_move[ref_price > brand_idx_imputed, labove_ref := 0]
all_move[ref_price < brand_idx_imputed, lbelow_ref := 0]
# Calculate the IV1
dma_move = all_move[, .(dma_above_ref = mean(labove_ref, na.rm = T), dma_below_ref = mean(lbelow_ref, na.rm = T)),
by = .(brand_descr_corrected, dma_descr, week_end)]
dma_move[, count_nonNA := .N - sum(is.na(dma_above_ref)), by = .(brand_descr_corrected, week_end)]
#dma_move[!is.na(dma_above_ref), count_nonNA := count_nonNA - 1]
dma_move[, `:=`(IV1_above_ref = mean(dma_above_ref, na.rm = T), IV1_below_ref = mean(dma_below_ref, na.rm = T)),
by = .(brand_descr_corrected, week_end)]
dma_move[!is.na(dma_above_ref),
`:=`(IV1_above_ref = (sum(dma_above_ref, na.rm = T) - dma_above_ref) / (count_nonNA - 1),
IV1_below_ref = (sum(dma_below_ref, na.rm = T) - dma_below_ref) / (count_nonNA - 1)),
by = .(brand_descr_corrected, week_end)]
dma_move[count_nonNA == 0 | (count_nonNA == 1 & !is.na(dma_above_ref)), `:=`(IV1_above_ref = NA, IV1_below_ref = NA)]
all_move = merge(all_move, dma_move[, .(brand_descr_corrected, dma_descr, week_end, IV1_above_ref, IV1_below_ref)],
by = c("brand_descr_corrected", "dma_descr", "week_end"))
# Calculate the IV2
all_move[, `:=`(IV2_above_ref = lhausman-lref, IV2_below_ref = lhausman-lref)]
all_move[ref_price > brand_idx_imputed, IV2_above_ref := 0]
all_move[ref_price < brand_idx_imputed, IV2_below_ref := 0]
# save(all_move, file="../../media/xlin0/share/xl150/move3_1393.RData")
# Keep only the store & brand that has (valid) observations more than 104 weeks (2yrs) in the regression
all_move[, `:=`(count = sum(rowSums(is.na(.SD)) == 0)), by = .(store_code_uc, brand_descr_corrected)]
all_move = all_move[count >= 104]
all_move[, `:=`(count_p1 = sum(rowSums(is.na(.SD)) == 0 & year %in% 2006:2007),
count_p2 = sum(rowSums(is.na(.SD)) == 0 & yearmonth %in% 200806:201012),
count_p3 = sum(rowSums(is.na(.SD)) == 0 & year %in% 2008)),
by = .(store_code_uc, brand_descr_corrected)]
all_move = all_move[count_p1 >= 15 & count_p2 >= 15 & count_p3 >= 10]
target_data = all_move[brand_descr_corrected %in% top_brand[1:5]]
# 1 Non-aggregated
# 1.1 IV1
reg_data = target_data[,.(year, yearmonth, week_end, lsold, lprice,
lref, labove_ref, lbelow_ref, IV1_above_ref, IV1_below_ref, lotherPrice,
Christmas, Thanksgiving, Easter, promotion, brand_descr_corrected, store_code_uc,
lhausman, lcpi, lunemploy)]
result_all = reg_data[, .(model = list(ivreg(lsold ~ lprice + labove_ref + lbelow_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter +
promotion | lhausman + IV1_above_ref + IV1_below_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter + promotion,
na.action = na.exclude))),
by = .(store_code_uc, brand_descr_corrected)]
# 1 Non-aggregated
# 1.1 IV1
reg_data = target_data[,.(year, yearmonth, week_end, lsold, lprice,
lref, labove_ref, lbelow_ref, IV1_above_ref, IV1_below_ref, lotherPrice,
Christmas, Thanksgiving, Easter, promotion, brand_descr_corrected, store_code_uc,
lhausman, lcpi, lunemploy)]
result_all = reg_data[, .(model = list(ivreg(lsold ~ lprice + labove_ref + lbelow_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter +
promotion | lhausman + IV1_above_ref + IV1_below_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter + promotion,
na.action = na.exclude))),
by = .(store_code_uc, brand_descr_corrected)]
result_0607 = reg_data[year %in% 2006:2007,
.(model = list(ivreg(lsold ~ lprice + labove_ref + lbelow_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter +
promotion | lhausman + IV1_above_ref + IV1_below_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter + promotion,
na.action = na.exclude))),
by = .(store_code_uc, brand_descr_corrected)]
result_0810 = reg_data[yearmonth %in% 200806:201012,
.(model = list(ivreg(lsold ~ lprice + labove_ref + lbelow_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter +
promotion | lhausman + IV1_above_ref + IV1_below_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter + promotion,
na.action = na.exclude))),
by = .(store_code_uc, brand_descr_corrected)]
result_08 = reg_data[year %in% 2008,
.(model = list(ivreg(lsold ~ lprice + labove_ref + lbelow_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter +
promotion | lhausman + IV1_above_ref + IV1_below_ref + lotherPrice +
lcpi + lunemploy + Christmas + Thanksgiving + Easter + promotion,
na.action = na.exclude))),
by = .(store_code_uc, brand_descr_corrected)]
# coefficients and p-values
result_all[, c("intercept", "coef_lprice", "coef_labove_ref", "coef_lbelow_ref", "coef_lotherPrice",
"coef_lcpi", "coef_lunemploy", "coef_Christmas", "coef_Thanksgiving", "coef_Easter",
"coef_promotion") := as.list(model[[1]]$coefficients),
by = .(store_code_uc, brand_descr_corrected)]
result_all = na.omit(result_all)
result_all[, c("pval_intercept", "pval_lprice", "pval_labove_ref", "pval_lbelow_ref", "pval_lotherPrice",
"pval_lcpi", "pval_lunemploy", "pval_Christmas", "pval_Thanksgiving", "pval_Easter",
"pval_promotion") := as.list(summary(model[[1]])$coefficients[,"Pr(>|t|)"]),
by = .(store_code_uc, brand_descr_corrected)]
result_0607[, c("intercept", "coef_lprice", "coef_labove_ref", "coef_lbelow_ref", "coef_lotherPrice",
"coef_lcpi", "coef_lunemploy", "coef_Christmas", "coef_Thanksgiving", "coef_Easter",
"coef_promotion") := as.list(model[[1]]$coefficients),
by = .(store_code_uc, brand_descr_corrected)]
result_0607 = na.omit(result_0607)
result_0607[, c("pval_intercept", "pval_lprice", "pval_labove_ref", "pval_lbelow_ref", "pval_lotherPrice",
"pval_lcpi", "pval_lunemploy", "pval_Christmas", "pval_Thanksgiving", "pval_Easter",
"pval_promotion") := as.list(summary(model[[1]])$coefficients[,"Pr(>|t|)"]),
by = .(store_code_uc, brand_descr_corrected)]
result_0810[, c("intercept", "coef_lprice", "coef_labove_ref", "coef_lbelow_ref", "coef_lotherPrice",
"coef_lcpi", "coef_lunemploy", "coef_Christmas", "coef_Thanksgiving", "coef_Easter",
"coef_promotion") := as.list(model[[1]]$coefficients),
by = .(store_code_uc, brand_descr_corrected)]
result_0810 = na.omit(result_0810)
result_0810[, c("pval_intercept", "pval_lprice", "pval_labove_ref", "pval_lbelow_ref", "pval_lotherPrice",
"pval_lcpi", "pval_lunemploy", "pval_Christmas", "pval_Thanksgiving", "pval_Easter",
"pval_promotion") := as.list(summary(model[[1]])$coefficients[,"Pr(>|t|)"]),
by = .(store_code_uc, brand_descr_corrected)]
result_08[, c("intercept", "coef_lprice", "coef_labove_ref", "coef_lbelow_ref", "coef_lotherPrice",
"coef_lcpi", "coef_lunemploy", "coef_Christmas", "coef_Thanksgiving", "coef_Easter",
"coef_promotion") := as.list(model[[1]]$coefficients),
by = .(store_code_uc, brand_descr_corrected)]
result_08 = na.omit(result_08)
result_08[, c("pval_intercept", "pval_lprice", "pval_labove_ref", "pval_lbelow_ref", "pval_lotherPrice",
"pval_lcpi", "pval_lunemploy", "pval_Christmas", "pval_Thanksgiving", "pval_Easter",
"pval_promotion") := as.list(summary(model[[1]])$coefficients[,"Pr(>|t|)"]),
by = .(store_code_uc, brand_descr_corrected)]
# Histograms
variables = c("lprice", "labove_ref", "lbelow_ref", "lotherPrice", "lcpi", "lunemploy",
"Christmas", "Thanksgiving", "Easter", "promotion")
resultBrand = unique(result_all$brand_descr_corrected)
#doHistogram(result_all, "All time")
#doHistogram(result_0607, "2006.01-2007.12")
#doHistogram(result_0810, "2008.06-2010.12")
#doHistogram(result_08, "2008")
resultBrand
result_all
reg_data
key(reg_data)
```{r}
plot(cars)
plot(cars)
setkey(reg_data, store_code_uc)
